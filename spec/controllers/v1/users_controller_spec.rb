require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe V1::UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      attributes: {
        name: "John Doe",
        email: "john@doe.com",
        password: "password",
      },
    }
  }

  let(:invalid_attributes) {
    {
      attributes: {
        email: "",
        password: "",
      },
    }
  }

  def authorization_header(payload)
    JsonWebToken.encode(user_id: payload.id)
  end

  describe "GET #index" do
    it "returns a success response" do
      user = FactoryBot.create(:user)

      request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

      get :index, {format: :json}

      expect(response).to be_successful
    end

    it "returns a link object" do
      users = FactoryBot.create_list(:user, 100)

      request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

      get :index, {format: :json}

      expect(JSON.parse(response.body)["links"]).to be_present
    end

    it "data of two pages shouldn't be same" do
      users = FactoryBot.create_list(:user, 100)

      request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

      get :index, {format: :json, params: {page: 1}}

      response_first = response

      get :index, {format: :json, params: {page: 2}}

      response_second = response

      expect(JSON.parse(response_first.body)["links"]).to_not eq(JSON.parse(response_second.body)["links"])
    end

    context "without search params" do
      it "returns a list of 10 users" do
        users = FactoryBot.create_list(:user, 100)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

        get :index, {format: :json}

        expect(JSON.parse(response.body)["data"].count).to eq(10)
      end
    end

    context "with search params" do
      it "returns a list of lesser than or equals to 10 users" do
        users = FactoryBot.create_list(:user, 100)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

        get :index, {format: :json, params: {search: "a"}}

        expect(JSON.parse(response.body)["data"].count).to be <= 10
      end

      it "returns a list of 10 users" do
        users = FactoryBot.create_list(:user, 100, name: "John Doe")

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

        get :index, {format: :json, params: {search: "John"}}

        expect(JSON.parse(response.body)["data"].count).to eq(10)
      end

      it "returns a list of 0 users" do
        users = FactoryBot.create_list(:user, 100, name: "John Doe")

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(users.first)

        get :index, {format: :json, params: {search: "Jane"}}

        expect(JSON.parse(response.body)["data"].count).to eq(0)
      end
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      user = FactoryBot.create(:user)

      request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

      get :show, params: {id: user.to_param}

      expect(response).to be_successful
    end

    context "when id is current" do
      it "returns the current user from the token" do
        user = FactoryBot.create_list(:user, 100)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(user.first)

        get :show, params: {id: "current"}

        expect(JSON.parse(response.body)["data"]["id"].to_i).to eq((JSON.parse(user.first.to_json)["id"]))
      end
    end

    context "when id is not current" do
      it "returns the user based on params[:id]" do
        user = FactoryBot.create_list(:user, 100)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(user.first)

        get :show, params: {id: user.last}

        expect(JSON.parse(response.body)["data"]["id"].to_i).to eq((JSON.parse(user.last.to_json)["id"]))
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          attributes: {
            name: "Jane Doe",
            email: "jane@doe.com",
            password: "password",
          },
        }
      }

      it "updates the requested user" do
        user = FactoryBot.create(:user)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

        put :update, params: {id: user.to_param, data: new_attributes}

        user.reload

        expect(user.name).to eq("Jane Doe")
      end

      it "renders a JSON response with the user" do
        user = FactoryBot.create(:user)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

        put :update, params: {id: user.to_param, data: new_attributes}

        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the user" do
        user = FactoryBot.create(:user)

        request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

        put :update, params: {id: user.to_param, data: invalid_attributes}

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = FactoryBot.create(:user)

      request.headers["HTTP_AUTHORIZATION"] = authorization_header(user)

      expect {
        delete :destroy, {format: :json, params: {id: user.to_param}}
      }.to change(User, :count).by(-1)
    end
  end
end
